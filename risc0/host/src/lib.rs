// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use ethers_core::types::Address;
use methods::{GAME_ZK_ELF, GAME_ZK_ID};
use risc0_zkvm::sha::Digest;
use risc0_zkvm::{get_prover_server, ExecutorEnv};
use risc0_zkvm::{InnerReceipt, ProverOpts};
use serde::Serialize;
use sha2::{Digest as _, Sha256};

#[derive(Serialize)]
pub enum Operation {
    //
}

pub fn prove(operations: &Vec<Operation>, output: &[u8]) -> Result<([u32; 8], Vec<u8>), ()> {
    let env = ExecutorEnv::builder()
        .write(operations)
        .unwrap()
        .build()
        .unwrap();

    // TODO check BONSAI APIKEY

    // RISC0_PROVER
    let prover = get_prover_server(&ProverOpts::groth16()).unwrap();

    let now = std::time::Instant::now();
    let prove_info = prover.prove(env, ACA_ZK_ELF).unwrap();
    println!("prove time: {}", now.elapsed().as_secs());

    let receipt = prove_info.receipt;
    receipt.verify(ACA_ZK_ID).unwrap();

    return Ok((ACA_ZK_ID, vec![]));

    let proof = match receipt.inner {
        InnerReceipt::Groth16(ref proof) => proof.seal.clone(),
        _ => {
            panic!("NOT SUPPORT");
        }
    };

    let (committed_vk_digest, committed_input_digest): (Digest, Digest) =
        receipt.journal.decode().unwrap();

    let mut hasher = Sha256::new();
    hasher.update(output);
    let commited2 = hasher.finalize();

    assert_eq!(committed_input_digest.as_bytes(), &commited2[..]);

    Ok((ACA_ZK_ID, proof))
}

#[cfg(test)]
mod tests {
    use super::*;
    use ethers_core::{
        abi::{encode, Token},
        types::H160,
    };

    fn simple_game_result(ranks: &[Address]) -> Vec<u8> {
        encode(&[Token::Array(
            ranks.iter().map(|v| Token::Address(*v)).collect(),
        )])
    }

    #[test]
    fn risc0_game_works() {
        let player1 = H160([1u8; 20]);
        let player2 = H160([2u8; 20]);
        let player3 = H160([3u8; 20]);
        let player4 = H160([4u8; 20]);

        let operations = vec![];
        println!("operations: {}", operations.len());

        let rank = simple_game_result(&[player1, player4]);
        prove(&operations, &rank).unwrap();
    }
}
